#!/usr/bin/env ruby
require 'optparse'
require 'io/console'
require 'octokit'

$options = {}

def assert_options_present(*mandatory)
  missing = mandatory.select{ |param| $options[param].nil? }
  unless missing.empty?
    raise OptionParser::MissingArgument.new(missing.join(', '))
  end
end

global = OptionParser.new do |opts|
  opts.banner = "Usage: create-github-deploy [$options]"

  opts.on("-r", "--ref REF", "Git ref to mark as deployed") do |ref|
    $options[:ref] = ref
  end

  opts.on("-p", "--repo REPO", "Github repository to deploy") do |repo|
    $options[:repo] = repo
  end

  opts.on("-e", "--environment ENVIRONMENT", "Environment being deployed to") do |environment|
    $options[:environment] = environment
  end

  opts.on("-v", "--verbose", "Turn on verbose logging") do
    $options[:environment] = true
  end
end

subcommands = {
  'create_deployment' => OptionParser.new do |opts|
      opts.banner = "Usage: create_deployment [$options]"
      opts.on("-d", "--description [DESCRIPTION]", "Description for deploy in Github") do |description|
        $options[:description] = description
      end
   end,
  'create_status' => OptionParser.new do |opts|
      opts.banner = "Usage: create_status [$options]"
      opts.on("-d", "--deployment-url DEPLOYMENTURL", "Deployment URL to create this status on in Github") do |deployment_url|
        $options[:deployment_url] = deployment_url
      end
      opts.on("-s", "--state STATE", "Deploy status state to create in Github") do |state|
        $options[:state] = state
      end
      opts.on("-d", "--description [DESCRIPTION]", "Description for deploy status in Github") do |description|
        $options[:description] = description
      end
      opts.on("-t", "--log-url [LOGURL]", "Log URL for deployment's output to associate with this status in Github") do |log_url|
        $options[:log_url] = log_url
      end
      opts.on("-u", "--environment-url [ENVIRONMENTURL]", "Environment URL for the thing deployed by this deployment status in Github") do |env_url|
        $options[:environment_url] = environment_url
      end
   end,
  'get_token' => OptionParser.new do |opts|
      opts.banner = "Usage: get_token [$options]"
      opts.on("-c", "--client-id CLIENT_ID", "Github application client id for creating a token") do |client_id|
        $options[:client_id] = client_id
      end
      opts.on("-s", "--client-secret CLIENT_SECRET", "Github application client secret for creating a token") do |client_secret|
        $options[:client_secret] = client_secret
      end
    end
 }

global.order!
command = ARGV.shift
if !command
  puts "Invalid invocation, no command provided. Valid commands are #{subcommands.keys.join(',')}"
  exit 1
end
assert_options_present(:ref, :repo, :environment)

if subcommands[command]
  subcommands[command].order!
else
  puts "Invalid invocation, unknown command: #{command}. Valid $options are: #{subcommands.keys.join(',')}"
  exit 1
end


stack = Faraday::RackBuilder.new do |builder|
  builder.use Faraday::Request::Retry, exceptions: [Octokit::ServerError]
  builder.use Octokit::Middleware::FollowRedirects
  builder.use Octokit::Response::RaiseError
  builder.use Octokit::Response::FeedParser
  if $options[:verbose]
    builder.response :logger
  end
  builder.adapter Faraday.default_adapter
end
Octokit.middleware = stack
Octokit.default_media_type = "application/vnd.github.flash-preview+json"
$client = Octokit::Client.new(access_token: ENV['GITHUB_ACCESS_TOKEN'])

def create_deployment
  deployment = $client.create_deployment($options[:repo], $options[:ref],
    auto_merge: false,
    required_contexts: [],
    environment: $options[:environment],
    transient_environment: false,
    production_environment: $options[:environment].start_with?('prod'),
    description: "Automatic deploy"
  )

  return deployment[:url]
end

def create_deployment_status
  assert_options_present(:deployment_url, :state)
  deployment_status = $client.create_deployment_status($options[:deployment_url], $options[:state], $options.slice(:description, :log_url, :environment))
  return deployment_status[:url]
end

def get_token
  assert_options_present(:client_id, :client_secret)

  print "Enter login: "
  login = gets.chomp
  print "Enter password: "
  password = STDIN.noecho(&:gets).chomp
  puts

  basic_auth_client = Octokit::Client.new(login: login, password: password)
  tfa_code = nil

  begin
    basic_auth_client.user
  rescue Octokit::OneTimePasswordRequired => e
    print "2FA code: "
    tfa_code = STDIN.noecho(&:gets).chomp
    puts
  end


  authorization = basic_auth_client.create_authorization({
    scopes: ["user", "repo_deployment"],
    note: "create-github-deploy token generated at #{Time.now} on #{`hostname`}",
    client_id: $options[:client_id],
    client_secret: $options[:client_secret],
    headers: { "X-GitHub-OTP" => tfa_code }
  })

  puts "New authorization token generated: #{authorization[:token]}"
end

case command
when 'create_deployment' then puts create_deployment
when 'create_status' then puts create_deployment_status
when 'get_token' then puts get_token
end
